import io;
import java.util.Scanner;
import java.lang.System;

class Test extends SuperTest {
	int i;
	int[] field;
	boolean j;
	Inherited_Method_Call_Simple mc;

	public int lol(int i) {
		field = new int[3];
		return i+2;
	}




    public boolean r(boolean k) {
        return k;
    }

    public int printArr(int[] arr) {
        io.println(arr[0]);
        io.println(arr[1]);
        io.println(arr[2]);
        io.println(arr[3]);
        io.println(arr[4]);
        io.println();

        return 0;
    }

    public int[] multarr(int[] arr) {
        int[] arrR;

        arrR = new int[5];

        arrR[0] = arr[0] * 2;
        arrR[1] = arr[1] * 2;
        arrR[2] = arr[2] * 2;
        arrR[3] = arr[3] * 2;
        arrR[4] = arr[4] * 2;


        io.println(1+2*3);
        io.println(1+2*3+5);
        io.println(1+2*3+6/3);

        return arrR;
    }

    public int allF(int a, boolean b, Parameters maf){
        return 0;
    }

    public int len(){
        int a;
        A b;
        b = new A();
        a.x();
        a = 10;
        a = x.len();
        io.print(a);
        return a;
    }

    public static void main(String[] args){
        Simple s;
        int x;
        int[] arr;
        int[] arrR;

        Test t;
        t = new Test();

        t = t.lol(1);

        arr = new int[5];
        arr[0] = 2;
        arr[1] = 3;
        arr[2] = 4;
        arr[3] = 5;
        arr[4] = 6;

        s = new Simple();

        arrR = s.multarr(arr);
        s.printArr(arr);
        s.printArr(arrR);

        k = new int[10*4-x];
    }

    public int foo(){
        return this.add(20);
    }

    public int func2(int[] a) {
        int k;
        Inherited_Method_Call_Simple mc;

        mc = new Inherited_Method_Call_Simple();

        k = mc.add(10);
        mc.foo();

        return 1;
    }

    public int getA(){
    	return a;
    }
    public int setA(int aNew){
        a = aNew;
        return a;
    }

    public int compare(B other){
        int res;
        if(other.getA() < this.getA())
            res = 1;
        else if(this.getA() < other.getA()){
            res = 3-1;
            res = 0-1;
        }

        else res = 0;
        return res;
    }
    public int compareSelf(){
        return this.compare(this);
    }

    public int mao(){
        B b;
        b = new B();
        b.setA(20);
        c = this.foo(); // TODO this doesnt register in the ST! HOW TO DO IT? ... O c não está declarado, a análise semântica é noutra entrega
        io.println(b.compareSelf());
        return b.compareSelf();
    }

    public int ifElseHell(int a){
        int result;

        if(a < 1){
          result =1;
        } else {
            if(a < 2){
             result = 2;
            } else {
                if(a < 3){
                    result = 3;
                } else {
                    if(a < 4){
                        result = 4;
                    } else {
                        if(a < b*5){
                            result = 5;
                        } else {
                            if(a < 6){
                                result = 6;
                            } else {
                                result = 7;

                                k = new FOo();
                            }
                        }
                    }
                }
            }
        }

        return result;
    }

    public int func4(int a, int b){
       int j;

        int[] arr;

        // arr[true] = 10; // TODO: are we supposed to allow this? ... sim, a análise semântica trata desses erros... podento até true ser intrepretado como 1

		a = true && false;

       c = b + 10 * (3 + this.func(3,4));
       j = this.func(3,4);
       ioPlus.printResult(1);
      return 1;
    }

    public boolean arraySum(){
            int[] arr1;
            int[] arr2;

            arr1 = new int[3];
            arr2 = new int[3];

            arr1[true]=1;

            arr1 = arr1 + arr2;

            return (arr1[0] < 1);
    }

    public int print(GetterAndSetter b){
        GetterAndSetter myGetter;
        int content;
        PrintOtherClassFromParam c;
        int dummy;
        myGetter = b;
        content = myGetter.getA();
        io.print(content);




        b = new GetterAndSetter();
        dummy = b.setA(10);
        c = new PrintOtherClassFromParam();
        c.print(b);

        return 1;
    	}

    public int whileAlive(){
        int i;
        i = 0;
        while(i < 10)
        {
            i = i + 1;
        }

        return 0;
    }

    public int soManyRegisters(int arg){
       int a;
       int b;
       int c;
       int d;
       a = 0;
       b = a;
       c = b;
       d = c;
       return d;
    }

    public int foo4(int factor){
	  int a;
	  int b;
	  a = 10;
	  b = a;
	  a = b * factor;
	  return a;
	}

    public int usingParam(int max, int a, int b, int c, int d){
	  a = 10;
	  if(max < a){
		a = max;
	  }else{
	    a = a;
	  }
	  return a;
	}
}

